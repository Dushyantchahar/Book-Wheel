import React from 'react';

function addComponentMeta(component, params) {
    component.displayName = params.name;
    if (params.validation) {
        Object.assign(component, convertValidation(params.validation));
    }
}
function convertValidation(validate) {
    return {
        propTypes: {
            '*': function (props, propName, componentName) {
                var result = validate(props);
                var errorMsg = result === false
                    ? 'Invalid props'
                    : result instanceof Error
                        ? result.message
                        : null;
                return !errorMsg
                    ? null
                    : new TypeError("Props validation error for component " +
                        ("'" + componentName + "' => " + errorMsg));
            }
        }
    };
}

function setJsSpecValidator(func, validator) {
    Object.defineProperty(func, 'js-spec:validate', {
        value: validator,
    });
}

function isElement(it) {
    return React.isValidElement(it);
}
setJsSpecValidator(isElement, function (it) {
    return isElement(it) ? null : new Error('Must be a React element');
});

function isElementOfType(type, it) {
    var ret = null;
    var typeOfType = typeof type;
    var typeIsString = typeOfType === 'string';
    var typeIsFunction = typeOfType === 'function';
    var typeIsArray = Array.isArray(type);
    if (!typeIsString && !typeIsFunction && !typeIsArray) {
        throw new TypeError('[isElementOfType] First argument "type" must either be a string, a function or ' +
            'an array of string or functions');
    }
    if (arguments.length > 1) {
        ret =
            React.isValidElement(it) &&
                (!typeIsArray ? it.type === type : type.indexOf(it.type) >= 0);
    }
    else {
        ret = function (it) { return isElementOfType(type, it); };
        setJsSpecValidator(ret, function (it) {
            return isElementOfType(type, it)
                ? null
                : new Error('Invalid type of React element');
        });
    }
    return ret;
}

var SYMBOL_ITERATOR = typeof Symbol === 'function' && Symbol.iterator
    ? Symbol.iterator
    : '@@iterator';
function isNode(it) {
    var type = typeof it;
    return (it === undefined ||
        it === null ||
        (type !== 'object' && type !== 'symbol') ||
        typeof it[SYMBOL_ITERATOR] === 'function' ||
        React.isValidElement(it));
}
setJsSpecValidator(isNode, function (it) {
    return isNode(it) ? null : new Error('Must be a React node');
});

function isRef(it) {
    return typeof it === 'function' || (it && 'current' in it);
}
setJsSpecValidator(isRef, function (it) {
    return isRef(it) ? null : new Error('Must be a ref');
});

function withChildren(f) {
    {
        if (typeof f !== 'function') {
            throw new TypeError('[withChildren] First argument "f" must be a function');
        }
    }
    return function (children) {
        return f(React.Children.toArray(children));
    };
}

export { addComponentMeta, isElement, isElementOfType, isNode, isRef, withChildren };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
