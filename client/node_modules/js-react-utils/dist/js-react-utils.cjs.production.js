"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var React=require("react");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var React__default=_interopDefaultLegacy(React);function addComponentMeta(e,t){e.displayName=t.name,t.validation&&Object.assign(e,convertValidation(t.validation))}function convertValidation(r){return{propTypes:{"*":function(e,t,n){e=r(e),e=!1===e?"Invalid props":e instanceof Error?e.message:null;return e?new TypeError("Props validation error for component '"+n+"' => "+e):null}}}}function setJsSpecValidator(e,t){Object.defineProperty(e,"js-spec:validate",{value:t})}function isElement(e){return React__default.default.isValidElement(e)}function isElementOfType(t,e){var n=null,r=typeof t,i="string"==r,o="function"==r,r=Array.isArray(t);if(!i&&!o&&!r)throw new TypeError('[isElementOfType] First argument "type" must either be a string, a function or an array of string or functions');return 1<arguments.length?n=React__default.default.isValidElement(e)&&(r?0<=t.indexOf(e.type):e.type===t):setJsSpecValidator(n=function(e){return isElementOfType(t,e)},function(e){return isElementOfType(t,e)?null:new Error("Invalid type of React element")}),n}setJsSpecValidator(isElement,function(e){return isElement(e)?null:new Error("Must be a React element")});var SYMBOL_ITERATOR="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function isNode(e){var t=typeof e;return null==e||"object"!=t&&"symbol"!=t||"function"==typeof e[SYMBOL_ITERATOR]||React__default.default.isValidElement(e)}function isRef(e){return"function"==typeof e||e&&"current"in e}function withChildren(t){return function(e){return t(React__default.default.Children.toArray(e))}}setJsSpecValidator(isNode,function(e){return isNode(e)?null:new Error("Must be a React node")}),setJsSpecValidator(isRef,function(e){return isRef(e)?null:new Error("Must be a ref")}),exports.addComponentMeta=addComponentMeta,exports.isElement=isElement,exports.isElementOfType=isElementOfType,exports.isNode=isNode,exports.isRef=isRef,exports.withChildren=withChildren;
